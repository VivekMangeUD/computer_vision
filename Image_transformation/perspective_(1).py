# -*- coding: utf-8 -*-
"""Perspective (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xXOhwLPpGPB9U-PzkZcgGOkVX4GPNkuR
"""


"""# New Section"""

import cv2
import numpy as np
import pandas as pd
import os
import csv

n=int(input())
if(n==1):
 folder_path = ('CISC642_PR1/Template/PartA/correspondances/perspective/lena.csv')
 original_image = cv2.imread('CISC642_PR1/Template/PartA/original/lena.png')
elif(n==2):
 folder_path = ('PartA/CISC642_PR1/Template/PartA/correspondances/perspective/water.csv')
 original_image = cv2.imread('PartA/CISC642_PR1/Template/PartA/original/water.jpg')
elif(n==3):
 folder_path = ('PartA/CISC642_PR1/Template/PartA/correspondances/perspective/computer.csv')
 original_image = cv2.imread('PartA/CISC642_PR1/Template/PartA/original/computer.png')
elif(n==4):
 folder_path = ('PartA/CISC642_PR1/Template/PartA/correspondances/perspective/mario.csv')
 original_image = cv2.imread('PartA/CISC642_PR1/Template/PartA/original/mario.jpg')
elif(n==5):
 folder_path = ('PartA/CISC642_PR1/Template/PartA/correspondances/perspective/mountain.csv')
 original_image = cv2.imread('PartA/CISC642_PR1/Template/PartA/original/mountain.jpg')
df = pd.read_csv(folder_path)
original_points = [(row[0], row[1], row[2], row[3]) for index, row in df.iterrows()]

original_array = np.array(original_points)
original_array=original_array[1:]
original_int_array = [[int(value) for value in row] for row in original_array]
original_points=[row[:2] for row in original_int_array]
transformed_points=[row[2:] for row in original_int_array]

m=int(input())


if(m>4):
    original_points = original_points[:m]
    transformed_points = transformed_points[:m]
    print(original_points)

    N = len(original_points)
    print(N)


    A = np.zeros((2 * N, 8))
    B = np.zeros((2 * N,))

    for i in range(N):
     x, y = original_points[i]
     x_prime, y_prime = transformed_points[i]

     A[2 * i] = [x, y, 1, 0, 0, 0, -x * x_prime, -y * x_prime]
     A[2 * i + 1] = [0, 0, 0, x, y, 1, -x * y_prime, -y * y_prime]

     B[2 * i] = x_prime
     B[2 * i + 1] = y_prime


perspective_matrix, _, _, _ = np.linalg.lstsq(A, B, rcond=None)

perspective_matrix = np.append(perspective_matrix, 1.0)
perspective_matrix = perspective_matrix.reshape(3, 3)
perspective_matrix_cv2_1 = cv2.findHomography(np.float32(original_points),np.float32(transformed_points))
print("built in Perspective Transformation Matrix:")
print(perspective_matrix_cv2_1)

# Print the perspective transformation matrix
print("Perspective Transformation Matrix:")
print(perspective_matrix)

original_points = original_points[:4]
transformed_points = transformed_points[:4]
N = len(original_points)


A = np.zeros((2 * N, 8))
B = np.zeros((2 * N,))

for i in range(N):
    x, y = original_points[i]
    x_prime, y_prime = transformed_points[i]

    A[2 * i] = [x, y, 1, 0, 0, 0, -x * x_prime, -y * x_prime]
    A[2 * i + 1] = [0, 0, 0, x, y, 1, -x * y_prime, -y * y_prime]

    B[2 * i] = x_prime
    B[2 * i + 1] = y_prime


perspective_matrix, _, _, _ = np.linalg.lstsq(A, B, rcond=None)
perspective_matrix = np.append(perspective_matrix, 1.0)


perspective_matrix_min = perspective_matrix.reshape(3, 3)
perspective_matrix_cv2 = cv2.getPerspectiveTransform(np.float32(original_points),np.float32(transformed_points))
print("built in Perspective Transformation Matrix:")
print(perspective_matrix_cv2)

# Print the perspective transformation matrix
print("Perspective Transformation Matrix:")
print(perspective_matrix_min)

original_image = cv2.imread('\orignal_image\lena.png')

if original_image is None:
  print('yes')
height, width, _ = original_image.shape
perspective_matrix = perspective_matrix.reshape(3, 3)



transformed_image = cv2.warpPerspective(original_image, perspective_matrix_min, (width, height))
transformed_image2 = cv2.warpPerspective(original_image, perspective_matrix, (width, height))

cv2.imshow('Original', original_image)
cv2.imshow('Transformed', transformed_image)
cv2.imshow('Transformed2', transformed_image2)

# cv2_imshow(original_image)
# cv2_imshow(transformed_image)
# cv2_imshow(transformed_image2)

cv2.waitKey(0)
cv2.destroyAllWindows()



