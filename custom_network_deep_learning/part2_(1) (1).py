# -*- coding: utf-8 -*-
"""part2 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VjhI-DQp_rFJA3eKa3T60sKv_Y_mdIa0
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import time
import os
import copy
import torch.nn.functional as F

data_transforms = transforms.Compose([transforms.Resize((224,224)),
                                      transforms.RandomHorizontalFlip(),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])

trainset = torchvision.datasets.CIFAR100(root='./data', train = True, transform = data_transforms, download=True)

testset = torchvision.datasets.CIFAR100(root='./data', train=False, transform = data_transforms,
download=True)


trainloader = torch.utils.data.DataLoader(trainset, batch_size=16,shuffle=True)

testloader = torch.utils.data.DataLoader(testset, batch_size=16,shuffle=True)

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3,1,1, padding_mode='replicate')
        self.conv2 = nn.Conv2d(32, 32, 3,1,1, padding_mode='replicate')
        self.conv3 = nn.Conv2d(32, 64, 3,1,1, padding_mode='replicate')
        self.fc1 = nn.Linear(28*28*64, 5000)
        self.fc2 = nn.Linear(5000, 100)
        self.pool = nn.MaxPool2d(2, 2)


    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.pool(F.relu(self.conv3(x)))
        x = x.view(-1, 28*28*64)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x


model = Model()

num_epochs = 30
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model = model.to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.0001)
scheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)

train = int(input("Enter 1 to train:"))
if train == 1:
  model.train()
  for epoch in range(num_epochs):

      running_loss = 0.0
      for i, data in enumerate(trainloader, 0):
          inputs, labels = data
          inputs, labels = inputs.cuda(), labels.cuda()


          optimizer.zero_grad()


          outputs = model(inputs)
          loss = criterion(outputs, labels)
          loss.backward()
          optimizer.step()


          running_loss += loss.item()
          if i % 2000 == 1999:    # print mini-batches
              print('[%d, %5d] loss: %.3f' %
                    (epoch + 1, i + 1, running_loss / 2000))
              running_loss = 0.0


  torch.save(model.state_dict(), 'best_model.pth')
  print('Finished Training')
else:
  model.eval()

true_pos = 0
total_detect = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        images, labels = images.cuda(), labels.cuda()
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total_detect += labels.size(0)
        true_pos += (predicted == labels).sum().item()

print('Accuracy : %d %%' % (
    100 * true_pos / total_detect))